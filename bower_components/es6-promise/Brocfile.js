function concatAs(e,s){return merge([concat(merge([e,header]),{headerFiles:["config/versionTemplate.txt"],inputFiles:["es6-promise.js"],outputFile:s}),concat(merge([e,header]),{headerFiles:["config/versionTemplate.txt"],inputFiles:["es6-promise.js"],outputFile:s.replace("es6-promise","es6-promise.auto"),footer:"ES6Promise.polyfill();"})])}function production(e,s){var r;return env("production",function(){r=uglify(concatAs(e,"es6-promise.min.js"),{compress:!0,mangle:!0})}),r}function development(e,s){return concatAs(e,"es6-promise.js")}var Rollup=require("broccoli-rollup"),Babel=require("broccoli-babel-transpiler"),merge=require("broccoli-merge-trees"),uglify=require("broccoli-uglify-js"),version=require("git-repo-version"),watchify=require("broccoli-watchify"),concat=require("broccoli-concat"),fs=require("fs"),stew=require("broccoli-stew"),find=stew.find,mv=stew.mv,rename=stew.rename,env=stew.env,map=stew.map,lib=find("lib"),testDir=find("test"),testFiles=find("test/{index.html,worker.js}"),json3=mv(find("node_modules/json3/lib/{json3.js}"),"node_modules/json3/lib/","test/"),mocha=mv(find("node_modules/mocha/mocha.{js,css}"),"node_modules/mocha/","test/"),testVendor=merge([json3,mocha]),es5=new Babel(lib,{blacklist:["es6.modules"]}),es6Promise=new Rollup(es5,{rollup:{entry:"lib/es6-promise.js",targets:[{format:"umd",moduleName:"ES6Promise",dest:"es6-promise.js",sourceMap:"inline"}]}}),testBundle=watchify(merge([mv(es6Promise,"test"),testDir]),{browserify:{debug:!0,entries:["./test/index.js"]}}),header=stew.map(find("config/versionTemplate.txt"),function(e){return e.replace(/VERSION_PLACEHOLDER_STRING/,version())}),dist=es6Promise;module.exports=merge([merge([production(es6Promise,header),development(es6Promise,header)].filter(Boolean)),testFiles,testVendor,mv(testBundle,"test")]);